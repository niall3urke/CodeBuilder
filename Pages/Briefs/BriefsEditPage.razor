@page "/briefs/edit/{id:guid}"
@using CodeBuilder.Bases
@using CodeBuilder.Code
@using CodeBuilder.Components
@using CodeBuilder.Models.Briefs;
@using CodeBuilder.Models;
@using CodeBuilder.Operations.Commands
@using CodeBuilder.Operations.Queries
@using CodeBuilder.Services

@inherits BaseComponent
@inject DisplaySettingsService Settings

<section class="section">
    <div class="container @(Settings.Expand ? "is-fluid" : "")">
        @if (_brief == null)
        {
            <div class="buttons are-large is-centered">
                <button class="button is-light is-loading"></button>
            </div>
        }
        else
        {
            <div class="columns is-centered">
                <div class="column @(Settings.Expand ? "" : "is-8")">
                    <div class="mb-6">
                        <div class="level is-mobile">
                            <div class="level-left">
                                <div class="level-item">
                                    <h3 class="title is-3">Edit Brief</h3>
                                </div>
                            </div>
                            <div class="level-right">
                                <div class="level-item">
                                    <a class="button is-light is-circle" href="/briefs">
                                        <span class="icon">
                                            <i class="fa fa-times"></i>
                                        </span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <IModelComponent Item="_brief"></IModelComponent>
                    <IStandardizedComponent Item="_brief"></IStandardizedComponent>
                    <!-- Checks -->
                    <div class="box px-6 py-6">
                        <div class="level is-mobile">
                            <div class="level-left">
                                <div class="level-item">
                                    <span class="icon is-small">
                                        <i class="fa fa-file"></i>
                                    </span>
                                </div>
                                <div class="level-item">
                                    <h4 class="label">Checks</h4>
                                </div>
                            </div>
                            <div class="level-right">
                                <div class="level-item">
                                    <button class="button is-small is-white is-circle">
                                        <span class="icon">
                                            <i class="fa fa-question"></i>
                                        </span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="level">
                            <div class="level-left">
                                <div class="level-item">
                                    <div class="field">
                                        <div class="control">
                                            <div class="dropdown is-fullwidth @(_view.CheckSearchResults.Count > 0 ? "is-active" : "")">
                                                <div class="dropdown-trigger">
                                                    <div class="control has-icons-left has-icons-right">
                                                        <input class="input" type="text" placeholder="Search..." @bind="@_view.CheckSearchTerm" @bind:event="oninput" @onkeyup="CheckSearch">
                                                        <span class="icon is-left">
                                                            <i class="fa fa-search"></i>
                                                        </span>
                                                        @if (_view.CheckLoading)
                                                        {
                                                            <span class="icon is-right">
                                                                <i class="fa fa-spinner fa-spin"></i>
                                                            </span>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="dropdown-menu" role="menu">
                                                    <div class="dropdown-content">
                                                        @foreach (var calculation in _view.CheckSearchResults)
                                                        {
                                                            <a class="dropdown-item" @onclick="() => CheckSelected(calculation)">
                                                                @($"{calculation.Name}")
                                                            </a>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="level-right"></div>
                        </div>
                        @foreach (var check in _checks.OrderBy(x => x.Index))
                        {
                            <div class="level">
                                <div class="level-left">
                                    <div class="level-item">
                                        <p>@check?.Name</p>

                                    </div>
                                </div>
                                <div class="level-right">
                                    <div class="level-item">
                                        <button class="button is-danger is-inverted is-radiusless" style="height: inherit; width: inherit;" @onclick="() => RemoveCheck(check)">
                                            <span class="icon is-small">
                                                <i class="fa fa-times"></i>
                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- #Meta -->
                    <IMetaComponent Item="_brief"></IMetaComponent>
                    <!-- #Buttons -->
                    <div class="level">
                        <div class="level-left">
                            <div class="level-item">
                                <button class="button is-danger is-outlined" @onclick="Delete">
                                    <span class="icon">
                                        <i class="fa fa-trash"></i>
                                    </span>
                                    <span>Delete</span>
                                </button>
                            </div>
                        </div>
                        <div class="level-right">
                            <div class="level-item">
                                <div class="buttons">
                                    <button class="button is-link is-light">
                                        <span class="icon">
                                            <i class="fa fa-code"></i>
                                        </span>
                                        <span>Preview</span>
                                    </button>
                                    <button class="button is-link" @onclick="Save">
                                        <span class="icon">
                                            <i class="fa fa-save"></i>
                                        </span>
                                        <span>Save</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@code {

    // Parameters

    [Parameter]
    public Guid Id { get; set; }

    // Fields

    private List<BriefCheckModel> _checks;

    private BriefModel _brief;

    private ViewModel _view;

    // Constructors

    public BriefsEditPage()
    {
        _checks = new List<BriefCheckModel>();
        _view = new ViewModel();
    }

    // Events

    protected override async Task OnInitializedAsync()
    {
        if (await GetItemFromDatabase())
        {
            await GetChecksFromDatabase();
        }
    }

    private async Task<bool> GetItemFromDatabase()
    {
        _brief = await new GetQuery<BriefModel>(ContextFactory)
            .WithIncludes("Checks", "Standard")
            .WithId(Id)
            .Execute();

        return _brief != null;
    }

    private async Task GetChecksFromDatabase()
    {
        _checks = (await new GetCollectionQuery<BriefCheckModel>(ContextFactory)
                        .WithIncludes("Check", "Brief")
                        .WithFilters(x => x.BriefId == _brief.Id)
                        .Execute()).ToList();
    }

    // Methods

    private async Task Save()
    {
        if (!await new UpdateCommand<BriefModel>(ContextFactory, _brief).Execute())
        {
            return;
        }

        // We need to sort out what's new, what's been removed and
        // what's simply been updated (like the index).

        var existing = (await new GetCollectionQuery<BriefCheckModel>(ContextFactory)
                        .WithIncludes("Check", "Brief")
                        .WithFilters(x => x.BriefId == _brief.Id)
                        .Execute()).ToList();

        // Get the checks that have been removed
        var removed = new List<BriefCheckModel>();
        foreach (var oldCheck in existing)
        {
            if (!_checks.Any(x => x.CheckId == oldCheck.CheckId))
            {
                removed.Add(oldCheck);
            }
        }

        // Get the checks that have been added
        var added = new List<BriefCheckModel>();
        foreach (var newCheck in _checks)
        {
            if (!existing.Any(x => x.CheckId == newCheck.CheckId))
            {
                added.Add(newCheck);
            }
        }

        // Get the checks that have been updated
        var updated = new List<BriefCheckModel>();
        foreach (var original in existing.Except(removed))
        {
            var changed = _checks.FirstOrDefault(x => x.CheckId == original.CheckId);

            if (changed?.Index != original.Index)
            {
                updated.Add(original);
            }
        }

        // Delete the removed items
        foreach (var check in removed)
        {
            await new DeleteBriefCheckCommand(ContextFactory, check).Execute();
        }

        // Add the new items
        foreach (var check in added)
        {
            await new CreateCommand<BriefCheckModel>(ContextFactory, new()
                {
                    BriefId = check.BriefId,
                    CheckId = check.CheckId,
                    Index = check.Index
                }).Execute();
        }

        // Update the changed items
        //foreach (var check in updated)
        //{
        //    await new UpdateCommand<BriefCheckModel>(ContextFactory, check).Execute();
        //}

        Nav.NavigateTo("/briefs");
    }


    private void CheckSelected(CheckModel check)
    {
        if (_checks.All(x => x.CheckId != check.Id))
        {
            _checks.Add(new()
                {
                    Check = check,
                    Brief = _brief,
                    CheckId = check.Id,
                    BriefId = _brief.Id,
                    Index = _checks.Count()
                });
        }

        _view.CheckSearchResults.Clear();

        _view.CheckSearchTerm = "";
    }

    private void RemoveCheck(BriefCheckModel check)
    {
        _checks.Remove(check);
    }

    private async Task CheckSearch()
    {
        if (_view.CheckLoading)
            return;

        if (_view.CheckSearchTerm.Length < 2)
        {
            _view.CheckSearchResults.Clear();
            return;
        }

        try
        {
            await StartCheckLoading();

            _view.CheckSearchResults = (await new GetCollectionQuery<CheckModel>(ContextFactory)
                    .WithFilters(x =>
                        x.Code.Contains(_view.CheckSearchTerm) ||
                        x.Name.Contains(_view.CheckSearchTerm) ||
                        x.Desc.Contains(_view.CheckSearchTerm))
                    .Execute())
                    .ToList();

            StateHasChanged();
        }
        finally
        {
            _view.CheckLoading = false;
        }
    }

    private async Task StartCheckLoading()
    {
        _view.CheckLoading = true;

        await Task.Delay(10);

        StateHasChanged();
    }

    // Deletion

    private async Task Delete()
    {
        var checks = await new GetCollectionQuery<BriefCheckModel>(ContextFactory)
                .WithFilters(x => x.BriefId == _brief.Id)
                .Execute();

        foreach (var check in checks)
        {
            await new DeleteCommand<BriefCheckModel>(ContextFactory, check.Id).Execute();
        }

        if (await new DeleteCommand<BriefModel>(ContextFactory, _brief.Id).Execute())
        {
            Nav.NavigateTo("/briefs");
        }
    }

    // Classes

    private class ViewModel
    {

        // Properties

        public List<CheckModel> CheckSearchResults { get; set; }

        public string CheckSearchTerm { get; set; }

        public bool CheckLoading { get; set; }

        // Constructors

        public ViewModel()
        {
            CheckSearchResults = new List<CheckModel>();
            CheckSearchTerm = "";
        }

    }


}
